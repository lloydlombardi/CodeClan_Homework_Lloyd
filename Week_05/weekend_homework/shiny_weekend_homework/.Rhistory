library(tidyverse)
library(CodeClanData)
game_sales
game_sales %>%
distinct(genre)
game_sales
game_sales %>%
distinct(publisher)
game_sales
game_sales %>%
distinct(developer)
game_sales
game_sales %>%
distinct(rating)
game_sales %>%
distinct(genre)
game_sales
game_sales %>%
distinct(platform)
view(game_sales)
library(tidyverse)
library(shiny)
library(CodeClanData)
library(plotly)
game_sales
runApp('video_game_app.R')
games <- game_sales
all_ratings <- games %>%
distinct(rating) %>%
pull()
all_genres <- games %>%
distinct(genre) %>%
arrange(genre) %>%
pull()
game_sales %>%
min(year)
game_sales
min_year <- min(games$year_of_release)
max_year <- max(games$year_of_release)
plot_colour <- c("Blue" = "deepskyblue", "Pink" = "deeppink", "Green" = "chartreuse1")
point_shape <- c("Square" = "15", "Circle" = "16", "Triangle" = "17")
library(tidyverse)
library(shiny)
library(CodeClanData)
library(plotly)
library(tidyverse)
library(shiny)
library(CodeClanData)
library(plotly)
games <- game_sales
all_ratings <- games %>%
distinct(rating) %>%
pull()
all_genres <- games %>%
distinct(genre) %>%
arrange(genre) %>%
pull()
min_year <- min(games$year_of_release)
max_year <- max(games$year_of_release)
plot_colour <- c("Blue" = "deepskyblue", "Pink" = "deeppink", "Green" = "chartreuse1")
point_shape <- c("Square" = "15", "Circle" = "16", "Triangle" = "17")
all_publishers <- games %>%
distinct(publisher) %>%
arrange(publisher) %>%
pull()
filtered_data_line <- eventReactive(input$update_line, {
games %>%
filter(year_of_release > input$year_choice[1] & year_of_release < input$year_choice[2])
runApp('video_game_app.R')
library(tidyverse)
library(shiny)
library(CodeClanData)
library(plotly)
library(shiny); runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
library(tidyverse)
library(shiny)
library(CodeClanData)
library(plotly)
library(bslib)
runApp('video_game_app.R')
runApp('video_game_app.R')
ui <- fluidPage(
theme = bs_theme(bootswatch = "superhero"),
sidebarLayout(
sidebarPanel = sidebarPanel(
titlePanel(tags$h1("Video Game Information")),
br(),
radioButtons(inputId = "rating_choice",
label = "Select a Rating",
choices =  all_ratings
),
selectInput(inputId = "genre_choice",
label = "Choose a Genre",
choices =  all_genres
),
sliderInput(inputId = "year_choice",
label = "Choose a Year",
min = min_year,
max = max_year,
value = c(min_year, max_year)
),
fluidRow(
column(4,
actionButton(inputId = "update_scatt",
label = "Update Scatter")
),
column(4,
actionButton(inputId = "update_line",
label = "Update Line")
)
)
),
mainPanel = mainPanel(
fluidRow(
column(4,
radioButtons(inputId = "colour_choice",
label = "Select the point colour",
choices = plot_colour
)
),
column(4,
radioButtons(inputId = "shape_choice",
label = "Select the point shape",
choices = point_shape
)
)
),
tabsetPanel(
tabPanel("Plots",
plotOutput("user_v_critic")
),
tabPanel("Data",
DT::dataTableOutput("table_output")
)
),
fluidRow(
column(4,
radioButtons(inputId = "colour_choice_2",
label = "Select the line colour",
choices = plot_colour
)
),
column(4,
selectInput(inputId = "publisher_choice",
label = "Choose the publisher",
choices = all_publishers
)
)
),
plotOutput("year_v_sales")
)
)
)
ui <- fluidPage(
theme = bs_theme(bootswatch = "superhero"),
sidebarLayout(
sidebarPanel = sidebarPanel(
titlePanel(tags$h1("Video Game Information")),
br(),
radioButtons(inputId = "rating_choice",
label = "Select a Rating",
choices =  all_ratings
),
selectInput(inputId = "genre_choice",
label = "Choose a Genre",
choices =  all_genres
),
sliderInput(inputId = "year_choice",
label = "Choose a Year",
min = min_year,
max = max_year,
value = c(min_year, max_year)
),
fluidRow(
column(4,
actionButton(inputId = "update_scatt",
label = "Update Scatter")
),
column(4,
actionButton(inputId = "update_line",
label = "Update Line")
)
)
),
mainPanel = mainPanel(
fluidRow(
column(4,
radioButtons(inputId = "colour_choice",
label = "Select the point colour",
choices = plot_colour
)
),
column(4,
radioButtons(inputId = "shape_choice",
label = "Select the point shape",
choices = point_shape
)
)
),
tabsetPanel(
tabPanel("Plots",
plotOutput("user_v_critic")
),
tabPanel("Data",
DT::dataTableOutput("table_output")
)
),
fluidRow(
column(4,
radioButtons(inputId = "colour_choice_2",
label = "Select the line colour",
choices = plot_colour
)
),
column(4,
selectInput(inputId = "publisher_choice",
label = "Choose the publisher",
choices = all_publishers
)
)
),
plotOutput("year_v_sales")
)
)
)
library(tidyverse)
library(shiny)
library(CodeClanData)
library(plotly)
library(bslib)
shinyApp(ui = ui, server = server)
library(shiny); runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
library(shiny); runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
library(tidyverse)
library(shiny)
library(CodeClanData)
library(plotly)
library(bslib)
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
library(shiny); runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
runApp('video_game_app.R')
library(shiny); runApp('video_game_app.R')
runApp('video_game_app.R')
counter <- reactiveValues(counter_value = 10000)
runApp('video_game_app.R')
library(shiny); runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
runApp('video_game_app.R')
